============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Triangle Classifier-04-24-2023-04-46-29/guisena08
collected 12 items

test_main.py FFFFFF...FFF                                                [100%]

=================================== FAILURES ===================================
_________________________ test_equilátero[test_input0] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5351ab0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'Equilatero'
E        +  where 'Equilatero' = <built-in method strip of str object at 0x7fdfd55f2bb0>()
E        +    where <built-in method strip of str object at 0x7fdfd55f2bb0> = 'Equilatero\n'.strip
E        +      where 'Equilatero\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5385cf0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5385cf0> = <_io.StringIO object at 0x7fdfd5385cf0>.getvalue

test_main.py:30: AssertionError
_________________________ test_equilátero[test_input1] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5347730>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'Equilatero'
E        +  where 'Equilatero' = <built-in method strip of str object at 0x7fdfd535dab0>()
E        +    where <built-in method strip of str object at 0x7fdfd535dab0> = 'Equilatero\n'.strip
E        +      where 'Equilatero\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5386b90>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5386b90> = <_io.StringIO object at 0x7fdfd5386b90>.getvalue

test_main.py:30: AssertionError
_________________________ test_equilátero[test_input2] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5512ad0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'Equilatero'
E        +  where 'Equilatero' = <built-in method strip of str object at 0x7fdfd53555b0>()
E        +    where <built-in method strip of str object at 0x7fdfd53555b0> = 'Equilatero\n'.strip
E        +      where 'Equilatero\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5387010>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5387010> = <_io.StringIO object at 0x7fdfd5387010>.getvalue

test_main.py:30: AssertionError
_________________________ test_isósceles[test_input0] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5314bb0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'Isóceles'
E        +  where 'Isóceles' = <built-in method strip of str object at 0x7fdfd53829d0>()
E        +    where <built-in method strip of str object at 0x7fdfd53829d0> = 'Isóceles\n'.strip
E        +      where 'Isóceles\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5387400>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5387400> = <_io.StringIO object at 0x7fdfd5387400>.getvalue

test_main.py:56: AssertionError
_________________________ test_isósceles[test_input1] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd55130a0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'Isóceles'
E        +  where 'Isóceles' = <built-in method strip of str object at 0x7fdfd53825b0>()
E        +    where <built-in method strip of str object at 0x7fdfd53825b0> = 'Isóceles\n'.strip
E        +      where 'Isóceles\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5387520>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5387520> = <_io.StringIO object at 0x7fdfd5387520>.getvalue

test_main.py:56: AssertionError
_________________________ test_isósceles[test_input2] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5316bf0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'Isóceles'
E        +  where 'Isóceles' = <built-in method strip of str object at 0x7fdfd5382790>()
E        +    where <built-in method strip of str object at 0x7fdfd5382790> = 'Isóceles\n'.strip
E        +      where 'Isóceles\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd53877f0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd53877f0> = <_io.StringIO object at 0x7fdfd53877f0>.getvalue

test_main.py:56: AssertionError
_____________________ test_não_é_um_triângulo[test_input0] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5513550>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Escaleno'
E        +  where 'Escaleno' = <built-in method strip of str object at 0x7fdfd535ef70>()
E        +    where <built-in method strip of str object at 0x7fdfd535ef70> = 'Escaleno\n'.strip
E        +      where 'Escaleno\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5387f40>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5387f40> = <_io.StringIO object at 0x7fdfd5387f40>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input1] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd5513880>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Escaleno'
E        +  where 'Escaleno' = <built-in method strip of str object at 0x7fdfd54a0fb0>()
E        +    where <built-in method strip of str object at 0x7fdfd54a0fb0> = 'Escaleno\n'.strip
E        +      where 'Escaleno\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5385bd0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5385bd0> = <_io.StringIO object at 0x7fdfd5385bd0>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input2] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fdfd531add0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'Escaleno'
E        +  where 'Escaleno' = <built-in method strip of str object at 0x7fdfd536a5f0>()
E        +    where <built-in method strip of str object at 0x7fdfd536a5f0> = 'Escaleno\n'.strip
E        +      where 'Escaleno\n' = <built-in method getvalue of _io.StringIO object at 0x7fdfd5387b50>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fdfd5387b50> = <_io.StringIO object at 0x7fdfd5387b50>.getvalue

test_main.py:104: AssertionError
=========================== short test summary info ============================
FAILED test_main.py::test_equilátero[test_input0] - AssertionError: assert 'E...
FAILED test_main.py::test_equilátero[test_input1] - AssertionError: assert 'E...
FAILED test_main.py::test_equilátero[test_input2] - AssertionError: assert 'E...
FAILED test_main.py::test_isósceles[test_input0] - AssertionError: assert 'Is...
FAILED test_main.py::test_isósceles[test_input1] - AssertionError: assert 'Is...
FAILED test_main.py::test_isósceles[test_input2] - AssertionError: assert 'Is...
FAILED test_main.py::test_não_é_um_triângulo[test_input0] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input1] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input2] - AssertionError: a...
========================= 9 failed, 3 passed in 0.07s ==========================
